//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/PlayerInputActionAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActionAsset: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActionAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActionAsset"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""12bf64d7-a8c0-4a3b-a1cc-9726c84c03d7"",
            ""actions"": [
                {
                    ""name"": ""character_look_position"",
                    ""type"": ""Value"",
                    ""id"": ""37a607bf-c999-4731-a814-42e7526fd53b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""character_shoot"",
                    ""type"": ""PassThrough"",
                    ""id"": ""56ea7c9e-c441-4314-834a-3697e85797c7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a5819a7d-7d7a-4fc0-ba71-88d54a60e2e6"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""character_look_position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fca1019-cdd6-4e4c-8d72-d8a10c179b0d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""character_shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_character_look_position = m_Player.FindAction("character_look_position", throwIfNotFound: true);
        m_Player_character_shoot = m_Player.FindAction("character_shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_character_look_position;
    private readonly InputAction m_Player_character_shoot;
    public struct PlayerActions
    {
        private @PlayerInputActionAsset m_Wrapper;
        public PlayerActions(@PlayerInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @character_look_position => m_Wrapper.m_Player_character_look_position;
        public InputAction @character_shoot => m_Wrapper.m_Player_character_shoot;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @character_look_position.started += instance.OnCharacter_look_position;
            @character_look_position.performed += instance.OnCharacter_look_position;
            @character_look_position.canceled += instance.OnCharacter_look_position;
            @character_shoot.started += instance.OnCharacter_shoot;
            @character_shoot.performed += instance.OnCharacter_shoot;
            @character_shoot.canceled += instance.OnCharacter_shoot;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @character_look_position.started -= instance.OnCharacter_look_position;
            @character_look_position.performed -= instance.OnCharacter_look_position;
            @character_look_position.canceled -= instance.OnCharacter_look_position;
            @character_shoot.started -= instance.OnCharacter_shoot;
            @character_shoot.performed -= instance.OnCharacter_shoot;
            @character_shoot.canceled -= instance.OnCharacter_shoot;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnCharacter_look_position(InputAction.CallbackContext context);
        void OnCharacter_shoot(InputAction.CallbackContext context);
    }
}
